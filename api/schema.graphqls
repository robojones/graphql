type Query {
	user: User!
	projects: [Project!]!
}

type Mutation {
	signup(input: SignupInput!): SignupPayload!
	login(input: LoginInput!): LoginPayload!
	logout: LogoutResult!

	createProject(input: CreateProjectInput!): CreateProjectPayload!
	updateProject(input: UpdateProjectInput!): UpdateProjectPayload!
}

input SignupInput {
	email: String!
	name: String!
	password: String!
}

type SignupPayload {
	session: Session!
	user: User!
}


input LoginInput {
	email: String!
	password: String!
}

type LoginPayload {
	session: Session!
	user: User!
}


type LogoutResult {
	user: User!
}

input CreateProjectInput {
	title: String!
}

type CreateProjectPayload {
	project: Project!
}

input UpdateProjectInput {
	id: ID!
	title: String
}

type UpdateProjectPayload {
	project: Project!
}

type User {
	id: ID!
	email: String!

	name: String!
	createdAt: String!
	updatedAt: String!
}

type Session {
	id: ID!
	token: String!
}

type Project {
	id: ID!
	title: String!
	members: [User!]!
}
